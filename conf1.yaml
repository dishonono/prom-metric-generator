apiVersion: v1
items:
  - apiVersion: v1
    kind: Service
    metadata:
      namespace: node
      creationTimestamp: null
      labels:
        io.kompose.service: client
      name: client
    spec:
      ports:
        - name: "4000"
          port: 4000
          targetPort: 4000
      selector:
        io.kompose.service: client
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      namespace: node
      creationTimestamp: null
      labels:
        io.kompose.service: grafana
      name: grafana
    spec:
      ports:
        - name: "9000"
          port: 9000
          targetPort: 3000
      selector:
        io.kompose.service: grafana
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      namespace: node
      creationTimestamp: null
      labels:
        io.kompose.service: prometheus
      name: prometheus
    spec:
      ports:
        - name: "9090"
          port: 9090
          targetPort: 9090
      selector:
        io.kompose.service: prometheus
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      namespace: node
      creationTimestamp: null
      labels:
        app: web
      name: web
    spec:
      ports:
        - name: "3000"
          port: 3000
          targetPort: 3000
      selector:
        app: web
    status:
      loadBalancer: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      namespace: node
      creationTimestamp: null
      labels:
        io.kompose.service: client
      name: client
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: client
      strategy: {}
      template:
        metadata:
          namespace: node
          creationTimestamp: null
          labels:
            io.kompose.service: client
        spec:
          containers:
            - env:
                - name: BLA
                  value: bla
              name: client
              image: promalertsacr.azurecr.io/client:v1
              ports:
                - containerPort: 4000
              resources: {}
          restartPolicy: Always
    status: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      namespace: node
      creationTimestamp: null
      labels:
        io.kompose.service: grafana
      name: grafana
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: grafana
      strategy:
        type: Recreate
      template:
        metadata:
          namespace: node
          creationTimestamp: null
          labels:
            io.kompose.service: grafana
        spec:
          containers:
            - image: promalertsacr.azurecr.io/grafana:v1
              name: grafana
              ports:
                - containerPort: 3000
              resources: {}
              volumeMounts:
                - mountPath: /var/lib/grafana
                  name: grafana-data
          restartPolicy: Always
          volumes:
            - name: grafana-data
              persistentVolumeClaim:
                claimName: grafana-data
    status: {}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      namespace: node
      creationTimestamp: null
      labels:
        io.kompose.service: grafana-data
      name: grafana-data
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
    status: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      namespace: node
      creationTimestamp: null
      labels:
        io.kompose.service: prometheus
      name: prometheus
    spec:
      replicas: 1
      selector:
        matchLabels:
          io.kompose.service: prometheus
      strategy:
        type: Recreate
      template:
        metadata:
          namespace: node
          creationTimestamp: null
          labels:
            io.kompose.service: prometheus
        spec:
          containers:
            - args:
                - --log.level=debug
                - --config.file=/etc/prometheus/prometheus.yml
              image: prom/prometheus:latest
              name: prometheus
              ports:
                - containerPort: 9090
              resources: {}
              volumeMounts:
                - mountPath: /etc/prometheus/prometheus.yml
                  name: prometheus-claim0
                - mountPath: /etc/prometheus/prometheus.rules.yml
                  name: prometheus-claim1
          restartPolicy: Always
          volumes:
            - name: prometheus-claim0
              persistentVolumeClaim:
                claimName: prometheus-claim0
            - name: prometheus-claim1
              persistentVolumeClaim:
                claimName: prometheus-claim1
    status: {}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      namespace: node
      creationTimestamp: null
      labels:
        io.kompose.service: prometheus-claim0
      name: prometheus-claim0
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
    status: {}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      namespace: node
      creationTimestamp: null
      labels:
        io.kompose.service: prometheus-claim1
      name: prometheus-claim1
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
    status: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      namespace: node
      creationTimestamp: null
      labels:
        app: web
      name: web
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: web
      strategy:
        type: Recreate
      template:
        metadata:
          namespace: node
          creationTimestamp: null
          labels:
            app: web
        spec:
          containers:
            - env:
                - name: BLA
                  value: bla
              image: promalertsacr.azurecr.io/web:v1
              name: web
              ports:
                - containerPort: 3000
              resources: {}
              volumeMounts:
                - mountPath: /usr/app/public
                  name: web-claim0
                - mountPath: /usr/app/alerts
                  name: web-claim1
          restartPolicy: Always
          volumes:
            - name: web-claim0
              persistentVolumeClaim:
                claimName: web-claim0
            - name: web-claim1
              persistentVolumeClaim:
                claimName: web-claim1
    status: {}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      namespace: node
      creationTimestamp: null
      labels:
        app: web-claim0
      name: web-claim0
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
    status: {}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      namespace: node
      creationTimestamp: null
      labels:
        app: web-claim1
      name: web-claim1
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
    status: {}
kind: List
metadata: {}


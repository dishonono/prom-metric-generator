apiVersion: apps/v1
kind: Deployment
metadata:
  name: client
  namespace: node
spec:
  replicas: 2
  selector:
    matchLabels:
      app: client
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  minReadySeconds: 5 
  template:
    metadata:
      labels:
        app: client
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: client
        image: promalertsacr.azurecr.io/client:v1.0.5
        ports:
        - containerPort: 3000
        resources:
          requests:
            cpu: 250m
          limits:
            cpu: 500m
        env:
        - name: BLA
          value: blabla
---
apiVersion: v1
kind: Service
metadata:
  name: client
  namespace: node
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 3000
  selector:
    app: client
---   
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: clientin
  namespace: node
  annotations:
    kubernetes.io/ingress.class: azure/application-gateway
    appgw.ingress.kubernetes.io/health-probe-path: "/"
spec:
  rules:
  - http:
      paths:
      - path: /blabladev
        pathType: Exact
        backend:
          service:
            name: client
            port: 
              number: 80
      - path: /metrics
        pathType: Exact
        backend:
          service:
            name: client
            port: 
              number: 80


apiVersion: apps/v1
kind: Deployment
metadata:
  name: web
  namespace: node
spec:
  replicas: 2
  selector:
    matchLabels:
      app: web
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  minReadySeconds: 5 
  template:
    metadata:
      labels:
        app: web
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: web
        image: promalertsacr.azurecr.io/web:v1.0.66
        ports:
        - containerPort: 3000
        resources:
          requests:
            cpu: 250m
          limits:
            cpu: 500m
        env:
        - name: BLA
          value: blabla
---
apiVersion: v1
kind: Service
metadata:
  name: web
  namespace: node
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 3000
  selector:
    app: web
---   
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: webin
  namespace: node
  annotations:
    kubernetes.io/ingress.class: azure/application-gateway
    appgw.ingress.kubernetes.io/health-probe-path: "/"
spec:
  rules:
  - http:
      paths:
      - path: /blabladev
        pathType: Exact
        backend:
          service:
            name: web
            port: 
              number: 80
      - path: /metrics
        pathType: Exact
        backend:
          service:
            name: web
            port: 
              number: 80


apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: node
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      name: grafana
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - name: grafana
          containerPort: 3000
        resources:
          limits:
            memory: "1Gi"
            cpu: "1000m"
          requests: 
            memory: 500M
            cpu: "500m"
        volumeMounts:
          - mountPath: /var/lib/grafana
            name: grafana-storage
          - mountPath: /etc/grafana/provisioning/datasources
            name: grafana-datasources
            readOnly: false
      volumes:
        - name: grafana-storage
          emptyDir: {}
        - name: grafana-datasources
          configMap:
              defaultMode: 420
              name: grafana-datasources
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: node
data:
  prometheus.yaml: |-
    {
        "apiVersion": 1,
        "datasources": [
            {
               "access":"proxy",
                "editable": true,
                "name": "prometheus",
                "orgId": 1,
                "type": "prometheus",
                "url": "http://prometheus-service.monitoring.svc:8080",
                "version": 1
            }
        ]
    }
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: node
  annotations:
      prometheus.io/scrape: 'true'
      prometheus.io/port:   '3000'
spec:
  selector: 
    app: grafana
  type: NodePort  
  ports:
    - port: 3000
      targetPort: 3000
      nodePort: 32000
          

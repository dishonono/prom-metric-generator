apiVersion: apps/v1
kind: Deployment
metadata:
  name: client
  namespace: node
spec:
  replicas: 1
  selector:
    matchLabels:
      app: client
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  minReadySeconds: 5 
  template:
    metadata:
      labels:
        app: client
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: client
        image: promalertsacr.azurecr.io/client:v1.0.11
        ports:
        - containerPort: 3000
        resources:
          requests:
            cpu: 250m
          limits:
            cpu: 500m
        env:
        - name: BLA
          value: blabla
---
apiVersion: v1
kind: Service
metadata:
  name: client
  namespace: node
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 3000
  selector:
    app: client
---   
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: clientin
  namespace: node
  annotations:
    kubernetes.io/ingress.class: azure/application-gateway
    appgw.ingress.kubernetes.io/health-probe-path: "/"
spec:
  rules:
  - http:
      paths:
      - path: /blabladev
        pathType: Exact
        backend:
          service:
            name: client
            port: 
              number: 80
      - path: /metrics
        pathType: Exact
        backend:
          service:
            name: client
            port: 
              number: 80


apiVersion: apps/v1
kind: Deployment
metadata:
  name: web
  namespace: node
spec:
  replicas: 1
  selector:
    matchLabels:
      app: web
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  minReadySeconds: 5 
  template:
    metadata:
      labels:
        app: web
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: web
        image: promalertsacr.azurecr.io/web:v1.0.70
        ports:
        - containerPort: 3000
        resources:
          requests:
            cpu: 250m
          limits:
            cpu: 500m
        env:
        - name: BLA
          value: blabla
---
apiVersion: v1
kind: Service
metadata:
  name: web
  namespace: node
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 3000
  selector:
    app: web
---   
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: web
  namespace: node
  annotations:
    kubernetes.io/ingress.class: azure/application-gateway
    appgw.ingress.kubernetes.io/health-probe-path: "/"
spec:
  rules:
  - host: 
  - http:
      paths:
      - path: /failures
        pathType: Exact
        backend:
          service:
            name: web
            port: 
              number: 80
      - path: /metrics
        pathType: Exact
        backend:
          service:
            name: web
            port: 
              number: 80
      - path: /dependencies
        pathType: Exact
        backend:
          service:
            name: web
            port: 
              number: 80


apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: node
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      name: grafana
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - name: grafana
          containerPort: 3000
        resources:
          limits:
            memory: "1Gi"
            cpu: "1000m"
          requests: 
            memory: 500M
            cpu: "500m"
        volumeMounts:
          - mountPath: /var/lib/grafana
            name: grafana-storage
          - mountPath: /etc/grafana/provisioning/datasources
            name: grafana-datasources
            readOnly: false
      volumes:
        - name: grafana-storage
          emptyDir: {}
        - name: grafana-datasources
          configMap:
              defaultMode: 420
              name: grafana-datasources
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: node

---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: node
  annotations:
      prometheus.io/scrape: 'true'
      prometheus.io/port:   '3000'
spec:
  selector: 
    app: grafana
  type: NodePort
  ports:
    - port: 3000
      targetPort: 3000
      nodePort: 32000
spec:
  type: LoadBalancer
  ports:
  - port: 3000
    targetPort: 3000

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: node
data:
  prometheus.yml: |
    # my global config
    global:
      scrape_interval:     5s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
      evaluation_interval: 5s # Evaluate rules every 15 seconds. The default is every 1 minute.
      external_labels: 
        cluster: 'democluster'

    # Alertmanager configuration
    alerting:
      alertmanagers:
      - static_configs:
        - targets:
          - web

    # Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
    rule_files:
      - 'prometheus.rules.yml'

    # A scrape configuration containing exactly one endpoint to scrape:
    # Here it's Prometheus itself.
    scrape_configs:
      # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
      - job_name: 'prometheus'

        # metrics_path defaults to '/metrics'
        # scheme defaults to 'http'.

        static_configs:
        - targets: ['localhost:9090']
      
      - job_name: 'web'

        # metrics_path defaults to '/metrics'
        # scheme defaults to 'http'.

        static_configs:
        - targets: ['web']
          
      - job_name: 'noam_custom'
---

# apiVersion: v1
# kind: PersistentVolume
# metadata:
#   name: pv-nfs-data
#   namespace: node
#   labels:
#     type: nfs
#     app: prometheus-deployment
# spec:
#   storageClassName: managed-nfs
#   capacity:
#     storage: 1Gi
#   accessModes:
#     - ReadWriteMany
#   nfs:
#     server: 192.168.31.174
#     path: "/mnt/nfs/promdata"
---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-nfs-data
  namespace: node
  labels:
    app: prometheus-deployment
spec:
  storageClassName: managed-nfs
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 500Mi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: node
  labels:
    app: prometheus
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        args:
          # - '--storage.tsdb.retention=6h'
          # - '--storage.tsdb.path=/prometheus'
          - '--config.file=/etc/prometheus/prometheus.yml'
        ports:
        - name: prom-web
          containerPort: 9090
        volumeMounts:
        - name: prometheus-config-volume
          mountPath: /etc/prometheus
        - name: prometheus-storage-volume
          mountPath: /prometheus
      restartPolicy: Always

      volumes:
      - name: prometheus-config-volume
        configMap:
            defaultMode: 420
            name: prometheus-config

      - name: prometheus-storage-volume
        # persistentVolumeClaim:
        #     claimName: pvc-nfs-data
  
---

apiVersion: v1
kind: Service
metadata:
    name: prometheus
    namespace: node
    annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port:   '9090'

# spec:
#     selector:
#         app: prometheus
#     type: NodePort
#     ports:
#     - port: 9090
#       targetPort: 9090 
#       nodePort: 31000
spec:
  type: LoadBalancer
  selector: 
    app: prometheus
  ports:
  - port: 9090
    targetPort: 9090
---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: default
  namespace: node